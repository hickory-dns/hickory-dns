sudo: required
dist: trusty
language: rust

matrix:
  include:
    # optional feature variations
    # we want full coverage, include all features...
    - rust: stable
      env: OPTIONS="--all-features"
           RUN_KCOV=1

    # no features
    - rust: stable
      env: MODULES="client integration-tests proto resolver server"
           OPTIONS="--no-default-features"
           RUN_KCOV=1

    # default features...
    - rust: stable
      env: MODULES="client integration-tests proto resolver server"
           RUN_KCOV=1

    # just openssl
    - rust: stable
      env: MODULES="client integration-tests proto resolver server"
           OPTIONS="--no-default-features --features=dnssec-openssl"
           RUN_KCOV=1

    # just ring
    - rust: stable
      env: MODULES="client integration-tests proto resolver server"
           OPTIONS="--no-default-features --features=dnssec-ring"
           RUN_KCOV=1

    # just tls using openssl
    - rust: stable
      env: MODULES="integration-tests server"
           OPTIONS="--no-default-features --features=tls-openssl"
           RUN_KCOV=1

    # min rust version
    # - rust: 1.14.0
    - rust: beta

    - os: osx
      rust: stable

    - rust: nightly

    - rust: nightly
      env: CLIPPY=true

    - rust: nightly
      env: RUSTFMT=true

    - rust: stable
      env: MODULES="compatibility-tests"
           TDNS_BIND_PATH="../../bind-9.11.0-P1/bin/named/named"
           OPTIONS="--no-default-features --features=bind"

  allow_failures:
    - rust: nightly

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then scripts/install_openssl_deb.sh ; fi
  - if [[ "$MODULES" == "compatibility-tests" ]]; then scripts/install_bind.sh ; fi
  - if [[ "$RUSTFMT" == "true" ]]; then cargo install rustfmt-nightly --force ; fi
  - if [[ "$CLIPPY" == "true" ]]; then cargo install clippy --force; fi

script:
    - bash -c 'if [ -z ${CLIPPY+x} ] && [ -z ${RUSTFMT+x} ] ; then scripts/run_tests.sh ; fi'
    - bash -c 'if [[ "$CLIPPY" == "true" ]] ; then scripts/run_clippy.sh ; fi'
    - bash -c 'if [[ "$RUSTFMT" == "true" ]] ; then cargo fmt --all -- --write-mode=diff; fi'
after_success: scripts/run_kcov.sh
