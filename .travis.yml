sudo: required
dist: trusty
language: rust
rust: stable

matrix:
  include:
    # parallel builds for tests
    - env: NAME=all_features
           RUST_BACKTRACE=full
      script: 
        - scripts/test_all_features.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=default_features
           RUST_BACKTRACE=full
      script: 
        - scripts/test_default_features.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=dns_over_native_tls
           RUST_BACKTRACE=full
      script: 
        - scripts/test_dns_over_native_tls.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=dns_over_openssl
           RUST_BACKTRACE=full
      script: 
        - scripts/test_dns_over_openssl.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=dns_over_rustls
           RUST_BACKTRACE=full
      script: 
        - scripts/test_dns_over_rustls.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=dnssec_openssl
           RUST_BACKTRACE=full
      script: 
        - scripts/test_dnssec_openssl.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=dnssec_ring
           RUST_BACKTRACE=full
      script: 
        - scripts/test_dnssec_ring.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=mdns
           RUST_BACKTRACE=full
      script: 
        - scripts/test_mdns.sh
      after_success:
        - scripts/run_kcov.sh

    # parallel builds for tests
    - env: NAME=no_default_features
           RUST_BACKTRACE=full
      script: 
        - scripts/test_no_default_features.sh
      after_success:
        - scripts/run_kcov.sh

    # min rust version
    - rust: 1.39.0
      env: NAME=min-version
           RUST_BACKTRACE=full
      script: 
        - scripts/test_default_features.sh

    # beta
    - rust: beta
      env: NAME=beta
           RUST_BACKTRACE=full
      script: 
        - scripts/test_all_features.sh

    # macos
    - os: osx
      env: NAME=macOS
           RUST_BACKTRACE=full
      script: 
        - scripts/test_all_features.sh

    # nightly
    - rust: nightly
      env: NAME=nightly
           RUST_BACKTRACE=full
      script: 
        - scripts/test_all_features.sh

    # clippy
    - env: NAME=clippy
           RUST_BACKTRACE=full
      script:
        - scripts/run_clippy.sh

    - env: NAME=rustfmt
           RUST_BACKTRACE=full
           CARGO_BUILD_PIPELINING=true
      before_install:
        - rustup component add rustfmt 
      script:
        - cargo fmt --version
        - cargo fmt --all -- --check

    # benchmark tests; built but not run in Travis to avoid inconsistent timing results
    - rust: nightly
      env: NAME=bench
      script:
        - scripts/build_benches.sh

    # compatiblity tests
    - env: NAME=compatiblity
           TDNS_BIND_PATH="../../bind-9.11.7/bin/named/named"
           RUST_BACKTRACE=full
      before_install:
        - sudo apt-get install -y python-ply
        - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then scripts/install_openssl_deb.sh; fi
        - scripts/install_bind.sh
      script:
        - cargo test --manifest-path tests/compatibility-tests/Cargo.toml --no-default-features --features=bind
      after_success:
        - scripts/run_kcov.sh

    - env: NAME=package-audit
      before_install:
        - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then scripts/install_openssl_deb.sh; fi
        - cargo install cargo-audit
        - cargo check
      script:
        - cargo audit --deny-warnings

  allow_failures:
    - rust: nightly

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then scripts/install_openssl_deb.sh; fi

## All scripts are run above...
script:
  - fail

#after_success: scripts/run_kcov.sh
