# Copyright 2015-2019 Benjamin Fry <benjaminfry@me.com>
#
# Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
# http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
# http://opensource.org/licenses/MIT>, at your option. This file may not be
# copied, modified, or distributed except according to those terms.

# This is a Makefile for `cargo make`, to use it first install cargo-make with `cargo install cargo-make`

[config]
skip_core_tasks = true

[config.modify_core_tasks]
# if true, all core tasks are set to private (default false)
private = true


## General environment configuration
[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"
TARGET_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}/target"
TDNS_BIND_PATH = "${TARGET_DIR}/bind"


## Installation tasks
##

[tasks.install-openssl]
description = "Installs OpenSSL on Windows"
env = { OPENSSL_VERSION = "1_1_1d", OPENSSL_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}\\target\\OpenSSL" }
condition = { platforms = ["windows"], files_not_exist = ["${OPENSSL_DIR}"] }
script_runner = "powershell"
script_extension = "ps1"
script = [
'''
mkdir ${env:CARGO_MAKE_WORKING_DIRECTORY}\\target
mkdir ${env:CARGO_MAKE_WORKING_DIRECTORY}\\target\OpenSSL
Invoke-WebRequest -URI "http://slproweb.com/download/Win64OpenSSL-${env:OPENSSL_VERSION}.exe" -OutFile "${env:CARGO_MAKE_WORKING_DIRECTORY}\target\OpenSSL.exe"
Start-Process -FilePath "${env:CARGO_MAKE_WORKING_DIRECTORY}\target\OpenSSL.exe" -ArgumentList "/SILENT /VERYSILENT /SP- /DIR=${env:OPENSSL_DIR}"
Invoke-WebRequest "https://curl.haxx.se/ca/cacert.pem" -O "${env:OPENSSL_DIR}\cacert.pem"
'''
]

[tasks.install-bind]
workspace = false
description = "Installs BIND9 on Ubuntu"
condition = { platforms = ["linux", "mac"], files_not_exist = ["${TDNS_BIND_PATH}/bin/named/named"] }
env = {  BIND_VER="9.11.7" }
script_runner = "@shell"
script = [
'''
set -e

## This must run after OpenSSL installation

echo installing python-ply
if apt-get --version ; then sudo apt-get install -y python-ply ; fi

if openssl version ; then WITH_OPENSSL="--with-openssl=$(dirname $(dirname $(which openssl)))" ; fi

mkdir -p ${TARGET_DIR:?}

echo "----> downloading bind"
rm -rf ${TARGET_DIR:?}/bind-${BIND_VER}
wget -O ${TARGET_DIR:?}/bind-${BIND_VER}.tar.gz https://downloads.isc.org/isc/bind9/${BIND_VER}/bind-${BIND_VER}.tar.gz
ls -la ${TARGET_DIR:?}/bind-${BIND_VER}.tar.gz
tar -xzf ${TARGET_DIR:?}/bind-${BIND_VER}.tar.gz -C ${TARGET_DIR:?}

echo "----> compiling bind"
rm -rf ${TDNS_BIND_PATH:?}
mv ${TARGET_DIR:?}/bind-${BIND_VER} ${TDNS_BIND_PATH:?}
cd ${TDNS_BIND_PATH:?}

./configure ${WITH_OPENSSL}
make
'''
]

[tasks.install-audit]
description = "Installs cargo-audit"
condition_script = ["if cargo audit ; then exit 1 ; else exit 0 ; fi"]
command = "cargo"
args = ["install", "cargo-audit"]

## Standard tasks for testing, building, etc.
##

# TODO: actually make this await rather than sleep
[tasks.await-update]
description = "awaits the package to show up in crates.io"
script_runner = "@shell"
script = [
'''
sleep 10
'''
]

[tasks.clean-bind]
description = "Remove the BIND9 build directory"
script_runner = "@shell"
script = [
'''
rm -rf ${TARGET_DIR}/bind
rm -rf ${TARGET_DIR}/bind_*
'''
]

[tasks.clean]
description = "Remove only the current workspace member"
dependencies = ["clean-bind"]
command = "cargo"
args = ["clean", "-p", "${CARGO_MAKE_CRATE_NAME}"]

[tasks.update]
description = "Update dependecies"
command = "cargo"
args = ["update", "-p", "${CARGO_MAKE_CRATE_NAME}"]

[tasks.fmt]
description = "Check formatting with rustfmt"
command = "cargo"
args = ["fmt", "--", "--check"]

[tasks.check]
description = "Run a quick check on all the crates"
command = "cargo"
args = ["check", "--lib", "--examples", "--tests", "--bins", "@@remove-empty(FEATURES)"]

[tasks.build]
description = "Build all the crates"
command = "cargo"
args = ["build", "--lib", "--bins",  "@@remove-empty(FEATURES)"]

[tasks.test]
description = "Run tests all the crates"
command = "cargo"
args = ["test", "--lib", "--examples", "--tests", "--bins", "@@remove-empty(FEATURES)"]

[tasks.clippy]
description = "Run the clippy linter on all crates"
dependencies = ["clean"]
command = "cargo"
args = ["clippy", "--lib", "--examples", "--tests", "--bins", "--all-features", "--", "-D", "warnings"]

[tasks.build-bench]
description = "Check that all benchmarks compile"
command = "cargo"
toolchain = "nightly"
args = ["bench", "--no-run"]

[tasks.audit]
description = "Run cargo audit on all crates"
workspace = false
dependencies = ["check", "install-audit"]
command = "cargo"
args = ["audit", "--deny-warnings"]

[tasks.bind-compatibility]
description = "Run compatibility tests, currently the BIND9 installation has issues, set TDNS_BIND_PATH to another BIND9 installation"
workspace = false
dependencies = ["install-bind"]
command = "cargo"
args = ["test", "--manifest-path=tests/compatibility-tests/Cargo.toml", "--no-default-features", "--features=bind"]

[tasks.all]
description = "Run check, build, and test on all crates"
dependencies = ["check", "build", "test"]

[tasks.default]
description = "Run the all task"
run_task = "all"

## All feature testing builds
##

[tasks.default-features]
description = "Run all with default features"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "" }
run_task = { name = "all", fork = true }

[tasks.no-default-features]
description = "Run all with --no-default-features"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--no-default-features", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "tests/compatibility-tests" }
run_task = { name = "all", fork = true }

[tasks.all-features]
description = "Run all with --all-features"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--all-features" }
run_task = { name = "all", fork = true }

[tasks.dns-over-openssl]
description = "Run all with --features=dns-over-openssl"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--features=dns-over-openssl", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/rustls;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dnssec-openssl]
description = "Run all with --features=dnssec-openssl"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--features=dnssec-openssl", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/rustls;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dnssec-ring]
description = "Run all with --features=dnssec-ring"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--features=dnssec-ring", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/rustls;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dns-over-rustls]
description = "Run all with --features=dns-over-rustls"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--features=dns-over-rustls", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/https;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dns-over-https-rustls]
description = "Run all with --features=dns-over-https-rustls"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--features=dns-over-https-rustls", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/native-tls;crates/openssl;crates/rustls;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.dns-over-native-tls]
description = "Run all with --features=dns-over-native-tls"
dependencies = ["install-openssl"]
workspace = false
# TODO: seems like a gap in testing if there are no testst in client for native-tls
env = { FEATURES = "--features=dns-over-native-tls", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/proto;crates/openssl;crates/rustls;crates/https;crates/client;crates/server;bin;tests/compatibility-tests;tests/integration-tests;util" }
run_task = { name = "all", fork = true }

[tasks.mdns]
description = "Run all with --features=mdns"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--features=mdns", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "crates/native-tls;crates/openssl;crates/rustls;crates/https;crates/server;bin;tests/compatibility-tests;util" }
run_task = { name = "all", fork = true }

[tasks.world]
description = "Run all with every features independently (this will melt your computer)"
dependencies = ["no-default-features", "default-features", "all-features", "dns-over-rustls", "dns-over-native-tls", "dns-over-openssl", "dns-dnssec-openssl", "dns-dnssec-openssl", "dns-dnssec-ring", "mdns"]

## publishing
##

[tasks.package]
description = "package artifacts for each crate"
command = "cargo"
args = ["package", "--locked"]

[tasks.publish]
description = "publish next release"
dependencies = ["await-update", "update", "check", "package"]
env = { CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "test/*"}
command = "cargo"
args = ["publish", "--verbose", "--locked"]