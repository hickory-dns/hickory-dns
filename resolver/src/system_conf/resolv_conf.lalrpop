// Copyright 2015-2017 Benjamin Fry <benjaminfry@me.com>
//
// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
// http://opensource.org/licenses/MIT>, at your option. This file may not be
// copied, modified, or distributed except according to those terms.

use std::str::FromStr;
use std::net::IpAddr;
use std::time::Duration;

use lalrpop_util::ErrorRecovery;
use trust_dns::rr::Name;

use system_conf::resolv_conf_ast::*;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

// TODO: there's a cleaner construct for this, but this is simpler...
pub config: Vec<ConfigOption<'input>> = {
   <v:config_line*> => v.into_iter().filter_map(|c| c).collect(),
};

pub config_line: Option<ConfigOption<'input>> = {
	<o:config_option> => Some(o),
	comment => None,
};

pub config_option: ConfigOption<'input> = {
	basic_option => ConfigOption::Basic(<>),
	advanced_options => ConfigOption::Advanced(<>),
};

pub advanced_options: Vec<AdvancedOption<'input>> = {
	"options" <v:advanced_option+> => v,
};

pub advanced_option: AdvancedOption<'input> = {
//	"ndots:" <n:u8> => AdvancedOption::NumberOfDots(n),
//	"timeout:" <n:u8> => AdvancedOption::Timeout(Duration::from_secs(n as u64)),
//	"attempts:" <n:u8> => AdvancedOption::Attempts(n),
//	r"[[:alpha:]]+:?\w?" => AdvancedOption::Unknown(<>),
	r"[[:alpha:]][[:alnum:]-_]+:?\w?" => AdvancedOption::parse(<>),
};

pub basic_option: BasicOption<'input> = {
	"nameserver" <i:ip_addr> => BasicOption::Nameserver(i),
	"domain" <n:name> => BasicOption::Domain(n),
	"search" <n:name+> => BasicOption::Search(n),
	r"sortlist [ 0-9\./]+" => BasicOption::SortList(<>),
};

pub comment: () = r"[#;][^\n]*" => ();

//pub ip_addr_mask: IpAddrAndMask = {
//	r"([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(?:/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})?)" => IpAddrAndMask::parse(<>),
	//<i:ip_addr> => IpAddrAndMask(i, None),
//};
//pub ip_mask: IpAddr = "/" <i:ip_addr> => i; 
pub ip_addr: IpAddr = r"([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}|(?:[0-9a-f]{0,4}:){2,7}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}|(?:[0-9a-f]{0,4}:){2,7}[0-9a-f]{1,4})" => IpAddr::from_str(<>).expect("failed to parse IpAddr");

// gah, needed the capture statement!
pub name: Name = r"([^#;:\.\s](?:[[:alnum:]]+\.)+|\.)" => Name::from_str(<>).expect("failed to parse Name");