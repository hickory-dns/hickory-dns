[package]
name = "hickory-proto"

# A short blurb about the package. This is not rendered in any format when
# uploaded to crates.io (aka this is not markdown)
description = """
Hickory DNS is a safe and secure DNS library. This is the foundational DNS protocol library for all Hickory DNS projects.
"""

# These URLs point to more information about the repository
documentation = "https://docs.rs/hickory-proto"

# This points to a file in the repository (relative to this Cargo.toml). The
# contents of this file are stored and indexed in the registry.
readme = "README.md"

version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
homepage.workspace = true
repository.workspace = true
keywords.workspace = true
categories.workspace = true
license.workspace = true

[features]
async-std = ["dep:async-std", "dep:pin-utils", "dep:socket2"]

dns-over-rustls = [
    "dep:tokio-rustls",
    "rustls/ring",
    "tokio",
]
dns-over-https-rustls = [
    "dep:bytes",
    "dep:h2",
    "dep:http",
    "dns-over-rustls",
]
dns-over-quic = [
    "dep:bytes",
    "dep:pin-project-lite",
    "dep:quinn",
    "dns-over-rustls",
]
dns-over-h3 = [
    "dep:h3",
    "dep:h3-quinn",
    "dep:http",
    "dns-over-quic",
]

rustls-platform-verifier = ["dep:rustls-platform-verifier"]

dnssec-aws-lc-rs = ["dep:aws-lc-rs", "aws-lc-rs/aws-lc-sys", "aws-lc-rs/ring-io", "__dnssec"]
dnssec-ring = ["dep:ring", "__dnssec"]
__dnssec = ["dep:bitflags", "dep:rustls-pki-types", "dep:time"]
testing = []

text-parsing = []
tokio = ["dep:tokio", "tokio/net", "tokio/rt", "tokio/time", "tokio/rt-multi-thread"]
default = ["tokio"]

serde = ["dep:serde", "url/serde"]

# enables experimental the mDNS (multicast) feature
mdns = ["socket2/all"]

wasm-bindgen = ["dep:wasm-bindgen-crate", "dep:js-sys"]

backtrace = ["dep:backtrace"]

[lib]
name = "hickory_proto"
path = "src/lib.rs"

[dependencies]
async-recursion.workspace = true
async-std = { workspace = true, optional = true }
async-trait.workspace = true
aws-lc-rs = { workspace = true, optional = true }
backtrace = { workspace = true, optional = true }
bitflags = { workspace = true, optional = true }
bytes = { workspace = true, optional = true }
cfg-if.workspace = true
data-encoding.workspace = true
enum-as-inner.workspace = true
futures-channel = { workspace = true, default-features = false, features = ["std"] }
futures-io = { workspace = true, default-features = false, features = ["std"] }
futures-util = { workspace = true, default-features = false, features = ["std"] }
h2 = { workspace = true, features = ["stream"], optional = true }
h3 = { workspace = true, optional = true }
h3-quinn = { workspace = true, optional = true }
http = { workspace = true, optional = true }
idna.workspace = true
ipnet.workspace = true
js-sys = { workspace = true, optional = true }
once_cell.workspace = true
pin-project-lite = { workspace = true, optional = true }
pin-utils = { workspace = true, optional = true }
quinn = { workspace = true, optional = true, features = ["log", "runtime-tokio", "rustls"] }
rand.workspace = true
ring = { workspace = true, optional = true, features = ["std"] }
rustls = { workspace = true, optional = true, default-features = false }
rustls-pki-types = { workspace = true, optional = true }
rustls-platform-verifier = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"], optional = true }
socket2 = { workspace = true, optional = true }
thiserror.workspace = true
time = { workspace = true, optional = true }
tinyvec = { workspace = true, features = ["alloc"] }
tracing.workspace = true
tokio = { workspace = true, features = ["io-util", "macros"], optional = true }
tokio-rustls = { workspace = true, optional = true, features = ["early-data"] }
url.workspace = true
wasm-bindgen-crate = { workspace = true, optional = true }
webpki-roots = { workspace = true, optional = true }

[dev-dependencies]
futures-executor = { workspace = true, default-features = false, features = ["std"] }
test-support.workspace = true
tokio = { workspace = true, features = ["rt", "time", "macros"] }
tracing-subscriber.workspace = true

[package.metadata.docs.rs]
all-features = true
default-target = "x86_64-unknown-linux-gnu"
targets = ["x86_64-apple-darwin", "x86_64-pc-windows-msvc"]
rustdoc-args = ["--cfg", "docsrs"]

[lints]
workspace = true

[package.metadata.cargo-all-features]
skip_optional_dependencies = true
max_combination_size = 2
